{
  "id": "bulk-messaging-workflow",
  "name": "Bulk SMS & WhatsApp Messaging with AI",
  "active": false,
  "version": 1,
  "nodes": [
    {
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "parameters": {
        "options": {
          "userInputs": [
            {
              "id": "message",
              "displayName": "Message Content",
              "type": "string",
              "description": "The message to be sent to recipients",
              "required": true
            },
            {
              "id": "recipients",
              "displayName": "Recipients (Phone Numbers)",
              "type": "string",
              "description": "Comma-separated list of phone numbers (e.g., +1234567890,+0987654321)",
              "required": true
            },
            {
              "id": "email",
              "displayName": "Your Email",
              "type": "string",
              "description": "Email address to receive the completion report",
              "required": true
            },
            {
              "id": "useAI",
              "displayName": "Use AI to enhance message",
              "type": "boolean",
              "description": "Enable OpenAI to rephrase/enhance your message",
              "default": false
            }
          ]
        }
      }
    },
    {
      "id": "check-ai-usage",
      "name": "Check AI Usage",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.useAI }}",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "openai-enhance",
      "name": "OpenAI Message Enhancement",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [680, 200],
      "parameters": {
        "operation": "text",
        "resource": "text",
        "model": "gpt-3.5-turbo-instruct",
        "prompt": "Enhance and improve the following message for bulk SMS/WhatsApp marketing while keeping it professional, engaging, and concise (max 160 characters for SMS compatibility):\n\n{{ $json.message }}\n\nReturn only the enhanced message without quotes or additional text.",
        "maxTokens": 100,
        "temperature": 0.7
      },
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI Credentials"
        }
      }
    },
    {
      "id": "merge-message",
      "name": "Merge Enhanced Message",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [900, 300],
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      }
    },
    {
      "id": "set-final-message",
      "name": "Set Final Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1120, 300],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "finalMessage",
              "value": "={{ $json.useAI && $json.choices ? $json.choices[0].text.trim() : $json.message }}"
            },
            {
              "name": "recipients",
              "value": "={{ $json.recipients }}"
            },
            {
              "name": "email",
              "value": "={{ $json.email }}"
            }
          ]
        },
        "options": {}
      }
    },
    {
      "id": "split-recipients",
      "name": "Split Recipients",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 300],
      "parameters": {
        "functionCode": "const recipients = $input.first().json.recipients;\nconst finalMessage = $input.first().json.finalMessage;\nconst email = $input.first().json.email;\n\n// Split recipients by comma and clean them\nconst phoneNumbers = recipients.split(',').map(num => num.trim()).filter(num => num.length > 0);\n\n// Create batches of 50\nconst batchSize = 50;\nconst batches = [];\n\nfor (let i = 0; i < phoneNumbers.length; i += batchSize) {\n  const batch = phoneNumbers.slice(i, i + batchSize);\n  batches.push({\n    batchNumber: Math.floor(i / batchSize) + 1,\n    totalBatches: Math.ceil(phoneNumbers.length / batchSize),\n    recipients: batch,\n    finalMessage: finalMessage,\n    email: email,\n    totalRecipients: phoneNumbers.length\n  });\n}\n\nreturn batches.map(batch => ({ json: batch }));"
      }
    },
    {
      "id": "send-sms-batch",
      "name": "Send SMS Batch",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [1560, 200],
      "parameters": {
        "operation": "send",
        "resource": "sms",
        "from": "={{ $credentials.twilio.fromPhoneNumber }}",
        "to": "={{ $json.recipients.join(',') }}",
        "message": "={{ $json.finalMessage }}"
      },
      "credentials": {
        "twilioApi": {
          "id": "twilio-credentials",
          "name": "Twilio Credentials"
        }
      },
      "retryOnFail": true,
      "maxTries": 4,
      "waitBetweenTries": 120000,
      "continueOnFail": true
    },
    {
      "id": "send-whatsapp-batch",
      "name": "Send WhatsApp Batch",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [1560, 400],
      "parameters": {
        "operation": "send",
        "resource": "sms",
        "from": "whatsapp:{{ $credentials.twilio.fromWhatsAppNumber }}",
        "to": "={{ $json.recipients.map(num => 'whatsapp:' + num).join(',') }}",
        "message": "={{ $json.finalMessage }}"
      },
      "credentials": {
        "twilioApi": {
          "id": "twilio-credentials",
          "name": "Twilio Credentials"
        }
      },
      "retryOnFail": true,
      "maxTries": 4,
      "waitBetweenTries": 120000,
      "continueOnFail": true
    },
    {
      "id": "collect-results",
      "name": "Collect Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1780, 300],
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      }
    },
    {
      "id": "wait-for-completion",
      "name": "Wait for All Batches",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [2000, 300],
      "parameters": {
        "amount": 5,
        "unit": "seconds"
      }
    },
    {
      "id": "prepare-summary",
      "name": "Prepare Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2220, 300],
      "parameters": {
        "functionCode": "const items = $input.all();\nlet totalSent = 0;\nlet totalFailed = 0;\nlet smsResults = [];\nlet whatsappResults = [];\nlet email = '';\nlet message = '';\n\nfor (const item of items) {\n  if (item.json.email) {\n    email = item.json.email;\n  }\n  if (item.json.finalMessage) {\n    message = item.json.finalMessage;\n  }\n  \n  // Count successful sends\n  if (item.json.sid) {\n    totalSent++;\n    if (item.json.from && item.json.from.includes('whatsapp')) {\n      whatsappResults.push(item.json);\n    } else {\n      smsResults.push(item.json);\n    }\n  } else if (item.json.error) {\n    totalFailed++;\n  }\n}\n\nconst summary = {\n  totalSent: totalSent,\n  totalFailed: totalFailed,\n  smsCount: smsResults.length,\n  whatsappCount: whatsappResults.length,\n  message: message,\n  email: email,\n  timestamp: new Date().toISOString(),\n  status: totalFailed > 0 ? 'Completed with errors' : 'Completed successfully'\n};\n\nreturn [{ json: summary }];"
      }
    },
    {
      "id": "send-completion-email",
      "name": "Send Completion Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [2440, 300],
      "parameters": {
        "toEmail": "={{ $json.email }}",
        "subject": "Bulk Messaging Campaign Completed - {{ $json.status }}",
        "message": "Hello,\\n\\nYour bulk messaging campaign has been completed.\\n\\n📊 SUMMARY:\\n• Total messages sent: {{ $json.totalSent }}\\n• SMS messages: {{ $json.smsCount }}\\n• WhatsApp messages: {{ $json.whatsappCount }}\\n• Failed messages: {{ $json.totalFailed }}\\n• Status: {{ $json.status }}\\n\\n📝 MESSAGE CONTENT:\\n{{ $json.message }}\\n\\n🕐 COMPLETED AT:\\n{{ $json.timestamp }}\\n\\n{{ $json.totalFailed > 0 ? 'Some messages failed to send. Please check your Twilio logs for detailed error information.' : 'All messages were sent successfully!' }}\\n\\nBest regards,\\nBulk Messaging System",
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "credentials": {
        "smtp": {
          "id": "smtp-credentials",
          "name": "SMTP Credentials"
        }
      },
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 30000
    },
    {
      "id": "final-output",
      "name": "Final Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [2660, 300],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "campaignStatus",
              "value": "={{ $json.status }}"
            },
            {
              "name": "totalSent",
              "value": "={{ $json.totalSent }}"
            },
            {
              "name": "completionMessage",
              "value": "Bulk messaging campaign completed. Summary email sent to {{ $json.email }}"
            }
          ]
        },
        "options": {}
      }
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Check AI Usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AI Usage": {
      "main": [
        [
          {
            "node": "OpenAI Message Enhancement",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Enhanced Message",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI Message Enhancement": {
      "main": [
        [
          {
            "node": "Merge Enhanced Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Enhanced Message": {
      "main": [
        [
          {
            "node": "Set Final Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Final Message": {
      "main": [
        [
          {
            "node": "Split Recipients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Recipients": {
      "main": [
        [
          {
            "node": "Send SMS Batch",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send WhatsApp Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send SMS Batch": {
      "main": [
        [
          {
            "node": "Collect Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send WhatsApp Batch": {
      "main": [
        [
          {
            "node": "Collect Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Collect Results": {
      "main": [
        [
          {
            "node": "Wait for All Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for All Batches": {
      "main": [
        [
          {
            "node": "Prepare Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Summary": {
      "main": [
        [
          {
            "node": "Send Completion Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Completion Email": {
      "main": [
        [
          {
            "node": "Final Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowOwner",
    "errorWorkflow": {
      "errorWorkflow": "",
      "continueOnFail": false
    }
  },
  "staticData": {},
  "tags": [
    {
      "id": "bulk-messaging",
      "name": "Bulk Messaging"
    },
    {
      "id": "sms",
      "name": "SMS"
    },
    {
      "id": "whatsapp",
      "name": "WhatsApp"
    },
    {
      "id": "ai",
      "name": "AI Enhanced"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-24T12:00:00.000Z",
  "versionId": "1"
}
